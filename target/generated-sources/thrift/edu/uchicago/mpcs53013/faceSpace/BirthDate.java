/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.uchicago.mpcs53013.faceSpace;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BirthDate implements org.apache.thrift.TBase<BirthDate, BirthDate._Fields>, java.io.Serializable, Cloneable, Comparable<BirthDate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BirthDate");

  private static final org.apache.thrift.protocol.TField BIRTH_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("birthDay", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField BIRTH_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("birthMonth", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField BIRTH_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("birthYear", org.apache.thrift.protocol.TType.I16, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BirthDateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BirthDateTupleSchemeFactory());
  }

  public short birthDay; // required
  public short birthMonth; // required
  public short birthYear; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BIRTH_DAY((short)1, "birthDay"),
    BIRTH_MONTH((short)2, "birthMonth"),
    BIRTH_YEAR((short)3, "birthYear");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BIRTH_DAY
          return BIRTH_DAY;
        case 2: // BIRTH_MONTH
          return BIRTH_MONTH;
        case 3: // BIRTH_YEAR
          return BIRTH_YEAR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BIRTHDAY_ISSET_ID = 0;
  private static final int __BIRTHMONTH_ISSET_ID = 1;
  private static final int __BIRTHYEAR_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BIRTH_DAY, new org.apache.thrift.meta_data.FieldMetaData("birthDay", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.BIRTH_MONTH, new org.apache.thrift.meta_data.FieldMetaData("birthMonth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.BIRTH_YEAR, new org.apache.thrift.meta_data.FieldMetaData("birthYear", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BirthDate.class, metaDataMap);
  }

  public BirthDate() {
  }

  public BirthDate(
    short birthDay,
    short birthMonth,
    short birthYear)
  {
    this();
    this.birthDay = birthDay;
    setBirthDayIsSet(true);
    this.birthMonth = birthMonth;
    setBirthMonthIsSet(true);
    this.birthYear = birthYear;
    setBirthYearIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BirthDate(BirthDate other) {
    __isset_bitfield = other.__isset_bitfield;
    this.birthDay = other.birthDay;
    this.birthMonth = other.birthMonth;
    this.birthYear = other.birthYear;
  }

  public BirthDate deepCopy() {
    return new BirthDate(this);
  }

  @Override
  public void clear() {
    setBirthDayIsSet(false);
    this.birthDay = 0;
    setBirthMonthIsSet(false);
    this.birthMonth = 0;
    setBirthYearIsSet(false);
    this.birthYear = 0;
  }

  public short getBirthDay() {
    return this.birthDay;
  }

  public BirthDate setBirthDay(short birthDay) {
    this.birthDay = birthDay;
    setBirthDayIsSet(true);
    return this;
  }

  public void unsetBirthDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIRTHDAY_ISSET_ID);
  }

  /** Returns true if field birthDay is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthDay() {
    return EncodingUtils.testBit(__isset_bitfield, __BIRTHDAY_ISSET_ID);
  }

  public void setBirthDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIRTHDAY_ISSET_ID, value);
  }

  public short getBirthMonth() {
    return this.birthMonth;
  }

  public BirthDate setBirthMonth(short birthMonth) {
    this.birthMonth = birthMonth;
    setBirthMonthIsSet(true);
    return this;
  }

  public void unsetBirthMonth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIRTHMONTH_ISSET_ID);
  }

  /** Returns true if field birthMonth is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthMonth() {
    return EncodingUtils.testBit(__isset_bitfield, __BIRTHMONTH_ISSET_ID);
  }

  public void setBirthMonthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIRTHMONTH_ISSET_ID, value);
  }

  public short getBirthYear() {
    return this.birthYear;
  }

  public BirthDate setBirthYear(short birthYear) {
    this.birthYear = birthYear;
    setBirthYearIsSet(true);
    return this;
  }

  public void unsetBirthYear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIRTHYEAR_ISSET_ID);
  }

  /** Returns true if field birthYear is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthYear() {
    return EncodingUtils.testBit(__isset_bitfield, __BIRTHYEAR_ISSET_ID);
  }

  public void setBirthYearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIRTHYEAR_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BIRTH_DAY:
      if (value == null) {
        unsetBirthDay();
      } else {
        setBirthDay((Short)value);
      }
      break;

    case BIRTH_MONTH:
      if (value == null) {
        unsetBirthMonth();
      } else {
        setBirthMonth((Short)value);
      }
      break;

    case BIRTH_YEAR:
      if (value == null) {
        unsetBirthYear();
      } else {
        setBirthYear((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BIRTH_DAY:
      return Short.valueOf(getBirthDay());

    case BIRTH_MONTH:
      return Short.valueOf(getBirthMonth());

    case BIRTH_YEAR:
      return Short.valueOf(getBirthYear());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BIRTH_DAY:
      return isSetBirthDay();
    case BIRTH_MONTH:
      return isSetBirthMonth();
    case BIRTH_YEAR:
      return isSetBirthYear();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BirthDate)
      return this.equals((BirthDate)that);
    return false;
  }

  public boolean equals(BirthDate that) {
    if (that == null)
      return false;

    boolean this_present_birthDay = true;
    boolean that_present_birthDay = true;
    if (this_present_birthDay || that_present_birthDay) {
      if (!(this_present_birthDay && that_present_birthDay))
        return false;
      if (this.birthDay != that.birthDay)
        return false;
    }

    boolean this_present_birthMonth = true;
    boolean that_present_birthMonth = true;
    if (this_present_birthMonth || that_present_birthMonth) {
      if (!(this_present_birthMonth && that_present_birthMonth))
        return false;
      if (this.birthMonth != that.birthMonth)
        return false;
    }

    boolean this_present_birthYear = true;
    boolean that_present_birthYear = true;
    if (this_present_birthYear || that_present_birthYear) {
      if (!(this_present_birthYear && that_present_birthYear))
        return false;
      if (this.birthYear != that.birthYear)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_birthDay = true;
    builder.append(present_birthDay);
    if (present_birthDay)
      builder.append(birthDay);

    boolean present_birthMonth = true;
    builder.append(present_birthMonth);
    if (present_birthMonth)
      builder.append(birthMonth);

    boolean present_birthYear = true;
    builder.append(present_birthYear);
    if (present_birthYear)
      builder.append(birthYear);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(BirthDate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBirthDay()).compareTo(other.isSetBirthDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthDay, other.birthDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthMonth()).compareTo(other.isSetBirthMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthMonth, other.birthMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthYear()).compareTo(other.isSetBirthYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthYear, other.birthYear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BirthDate(");
    boolean first = true;

    sb.append("birthDay:");
    sb.append(this.birthDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("birthMonth:");
    sb.append(this.birthMonth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("birthYear:");
    sb.append(this.birthYear);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'birthDay' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'birthMonth' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'birthYear' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BirthDateStandardSchemeFactory implements SchemeFactory {
    public BirthDateStandardScheme getScheme() {
      return new BirthDateStandardScheme();
    }
  }

  private static class BirthDateStandardScheme extends StandardScheme<BirthDate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BirthDate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BIRTH_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.birthDay = iprot.readI16();
              struct.setBirthDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BIRTH_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.birthMonth = iprot.readI16();
              struct.setBirthMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BIRTH_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.birthYear = iprot.readI16();
              struct.setBirthYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBirthDay()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'birthDay' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBirthMonth()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'birthMonth' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBirthYear()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'birthYear' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BirthDate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BIRTH_DAY_FIELD_DESC);
      oprot.writeI16(struct.birthDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIRTH_MONTH_FIELD_DESC);
      oprot.writeI16(struct.birthMonth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIRTH_YEAR_FIELD_DESC);
      oprot.writeI16(struct.birthYear);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BirthDateTupleSchemeFactory implements SchemeFactory {
    public BirthDateTupleScheme getScheme() {
      return new BirthDateTupleScheme();
    }
  }

  private static class BirthDateTupleScheme extends TupleScheme<BirthDate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BirthDate struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI16(struct.birthDay);
      oprot.writeI16(struct.birthMonth);
      oprot.writeI16(struct.birthYear);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BirthDate struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.birthDay = iprot.readI16();
      struct.setBirthDayIsSet(true);
      struct.birthMonth = iprot.readI16();
      struct.setBirthMonthIsSet(true);
      struct.birthYear = iprot.readI16();
      struct.setBirthYearIsSet(true);
    }
  }

}

